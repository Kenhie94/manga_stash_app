{"ast":null,"code":"// server.js\n\nconst express = require('express');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nconst app = express();\napp.use(cors());\n\n// Connect to your MongoDB Atlas cluster\nmongoose.connect('your-mongodb-connection-string', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst Schema = mongoose.Schema;\n\n// Create a Mongoose model\nconst YourModel = mongoose.model('YourModel', new Schema({/* your schema definition */}));\n\n// Define a route to fetch data\napp.get('/api/data', async (req, res) => {\n  try {\n    const data = await YourModel.find(); // Retrieve data from your MongoDB collection\n    res.json(data);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","mongoose","app","use","connect","useNewUrlParser","useUnifiedTopology","Schema","YourModel","model","get","req","res","data","find","json","error","status","message","PORT","process","env","listen","console","log"],"sources":["C:/Users/kenjy/OneDrive/Desktop/Personal_Projects/MangaStash/src/services/mangadexService.js"],"sourcesContent":["// server.js\r\n\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\n\r\nconst app = express();\r\napp.use(cors());\r\n\r\n// Connect to your MongoDB Atlas cluster\r\nmongoose.connect('your-mongodb-connection-string', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\n// Create a Mongoose model\r\nconst YourModel = mongoose.model('YourModel', new Schema({ /* your schema definition */ }));\r\n\r\n// Define a route to fetch data\r\napp.get('/api/data', async (req, res) => {\r\n  try {\r\n    const data = await YourModel.find(); // Retrieve data from your MongoDB collection\r\n    res.json(data);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrBI,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;AAEf;AACAC,QAAQ,CAACG,OAAO,CAAC,gCAAgC,EAAE;EACjDC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAGN,QAAQ,CAACM,MAAM;;AAE9B;AACA,MAAMC,SAAS,GAAGP,QAAQ,CAACQ,KAAK,CAAC,WAAW,EAAE,IAAIF,MAAM,CAAC,CAAE,6BAA8B,CAAC,CAAC;;AAE3F;AACAL,GAAG,CAACQ,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAML,SAAS,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;IACrCF,GAAG,CAACG,IAAI,CAACF,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEC,KAAK,EAAEA,KAAK,CAACE;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCjB,GAAG,CAACoB,MAAM,CAACH,IAAI,EAAE,MAAM;EACrBI,OAAO,CAACC,GAAG,CAAE,6BAA4BL,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}